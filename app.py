import hmac
import hashlib
import base64
from flask import Flask, request
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
import datetime
import json
from linebot.models import FlexSendMessage

LINE_CHANNEL_ACCESS_TOKEN = 'j439mGdFC5EcytTbm+dmZAfn15HrEoa3ey5sn0uNMGgjdWA4M1bHJxeD3W+7Xloo2q1QQ2pDD+SgBKq+PR1sJZrUBkYAht3obUcLlEdA6jI3aIWndg5fwLPp5noZwJ9ZTjFQrec0x5G0xGYjeQEMhgdB04t89/1O/w1cDnyilFU='
LINE_CHANNEL_SECRET = 'a94cf964732a9952e2d989784d1b2cc3'

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

app = Flask(__name__)

def verify_signature(signature, body):
    secret = bytes(LINE_CHANNEL_SECRET, 'utf-8')
    hash = hmac.new(secret, body.encode('utf-8'), hashlib.sha256).digest()
    calculated_signature = base64.b64encode(hash).decode()
    return hmac.compare_digest(signature, calculated_signature)

@app.route('/callback', methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    if not verify_signature(signature, body):
        return 'Invalid signature', 400
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return 'Invalid signature', 400
    return 'OK', 200

def init_db():
    with sqlite3.connect('db.sqlite') as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            due_date TEXT NOT NULL,
            user_id TEXT NOT NULL,
            next_notify TEXT
        )''')
        conn.commit()

def add_next_notify_column():
    with sqlite3.connect('db.sqlite') as conn:
        c = conn.cursor()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå next_notify ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        c.execute("PRAGMA table_info(tasks);")
        columns = [column[1] for column in c.fetchall()]
        
        if 'next_notify' not in columns:
            c.execute('''ALTER TABLE tasks ADD COLUMN next_notify TEXT;''')
            print("Column next_notify added.")
        else:
            print("Column next_notify already exists.")

        conn.commit()

init_db()
add_next_notify_column()

scheduler = BackgroundScheduler()
scheduler.start()

def send_notifications():
    today = datetime.date.today().strftime('%Y-%m-%d')
    with sqlite3.connect('db.sqlite') as conn:
        c = conn.cursor()
        c.execute('SELECT name, due_date, user_id FROM tasks WHERE due_date = ?', (today,))
        tasks = c.fetchall()
        for task in tasks:
            name, due_date, user_id = task  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
            line_bot_api.push_message(user_id, TextSendMessage(text=f"üìå ‡∏á‡∏≤‡∏ô '{name}' ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á {due_date}!"))

scheduler.add_job(send_notifications, 'interval', days=1)

def setup_custom_notifications(event, days_interval):
    with sqlite3.connect('db.sqlite') as conn:
        c = conn.cursor()
        c.execute('SELECT name, user_id, due_date FROM tasks')
        tasks = c.fetchall()

        for task in tasks:
            name, user_id, due_date = task
            due_date = datetime.datetime.strptime(due_date, "%Y-%m-%d").date()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            today = datetime.date.today()
            next_notification = today + datetime.timedelta(days=days_interval)

            if next_notification < today:  # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
                next_notification = today

            c.execute('UPDATE tasks SET next_notify = ? WHERE name = ? AND user_id = ?', 
                      (next_notification.strftime('%Y-%m-%d'), name, user_id))
            conn.commit()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏ô scheduler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            scheduler.add_job(send_custom_notification, 'interval', days=days_interval, 
                              start_date=next_notification, args=[user_id, name, next_notification])

    line_bot_api.push_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ó‡∏∏‡∏Å‡πÜ {days_interval} ‡∏ß‡∏±‡∏ô!"))

def send_custom_notification(user_id, task_name, next_notification):
    line_bot_api.push_message(user_id, TextSendMessage(text=f"üìå ‡∏á‡∏≤‡∏ô '{task_name}' ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {next_notification}!"))

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()

    if text == "‡πÄ‡∏°‡∏ô‡∏π":
        flex_content = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": "üîπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", "weight": "bold", "size": "lg"},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "text": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"}},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "üìã ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "text": "‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "üóë ‡∏•‡∏ö‡∏á‡∏≤‡∏ô", "text": "‡∏•‡∏ö‡∏á‡∏≤‡∏ô"}},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "üóë ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "text": "‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "text": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}},
                    {"type": "button", "style": "primary", "action": {"type": "message", "label": "‚è∞ ‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "text": "‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}}
                ]
            }
        }

        message = FlexSendMessage(alt_text="‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", contents=flex_content)
        line_bot_api.reply_message(event.reply_token, message)

    elif text == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô":
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô,YYYY-MM-DD")
        )

    elif "," in text:
        try:
            name, due_date = map(str.strip, text.split(","))
            try:
                datetime.datetime.strptime(due_date, "%Y-%m-%d")
            except ValueError:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà"))
                return
            with sqlite3.connect('db.sqlite') as conn:
                c = conn.cursor()
                c.execute('INSERT INTO tasks (name, due_date, user_id, next_notify) VALUES (?, ?, ?, ?)', 
                          (name, due_date, user_id, due_date))
                conn.commit()
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
        except Exception as e:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"))

    elif text == "‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        with sqlite3.connect('db.sqlite') as conn:
            c = conn.cursor()
            c.execute('SELECT id, name, due_date FROM tasks WHERE user_id = ?', (user_id,))
            tasks = c.fetchall()

        if tasks:
            task_list = "\n".join([f"{task[0]}. {task[1]} - {task[2]}" for task in tasks])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"üìã ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n{task_list}"))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"))

    elif text == "‡∏•‡∏ö‡∏á‡∏≤‡∏ô":
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£? (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏á‡∏≤‡∏ô 1', '‡∏á‡∏≤‡∏ô 2')")
        )

    elif text.startswith('‡∏á‡∏≤‡∏ô'):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô
        task_id = text[4:]  # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏á‡∏≤‡∏ô" ‡∏≠‡∏≠‡∏Å
        if task_id.isdigit():  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            task_id = int(task_id)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            conn = sqlite3.connect('db.sqlite')
            c = conn.cursor()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            c.execute('SELECT * FROM tasks WHERE id = ? AND user_id = ?', (task_id, user_id))
            task = c.fetchone()

            if task:
                task_name = task[1]  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö
                # ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
                c.execute('DELETE FROM tasks WHERE id = ? AND user_id = ?', (task_id, user_id))

                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ AUTOINCREMENT ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å 1
                c.execute('''UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='tasks' ''')
                conn.commit()
                conn.close()

                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà '{task_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))

    elif text == "‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô":
        with sqlite3.connect('db.sqlite') as conn:
            c = conn.cursor()
            c.execute('SELECT name, next_notify FROM tasks WHERE user_id = ?', (user_id,))
            tasks = c.fetchall()

        if tasks:
            task_list = "\n".join([f"‡∏á‡∏≤‡∏ô '{task[0]}' ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {task[1]}" for task in tasks])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:\n{task_list}"))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"))

    elif text == "‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        try:
            conn = sqlite3.connect('db.sqlite')
            c = conn.cursor()

            # ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            c.execute('DELETE FROM tasks WHERE user_id = ?', (user_id,))

            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ AUTOINCREMENT ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å 1
            c.execute('''UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='tasks' ''')

            conn.commit()
            conn.close()

            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
        except Exception as e:
            print(f"Error: {e}")
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"))

    elif text == "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô":
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ó‡∏∏‡∏Å‡πÜ ‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô! (‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô)")
        )

    elif text.isdigit():  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        days = int(text)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

        if days > 0:
            notification_interval = days
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ó‡∏∏‡∏Å‡πÜ {days} ‡∏ß‡∏±‡∏ô!")
            )
            setup_custom_notifications(event, days)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            )

if __name__ == "__main__":
    app.run(port=8000)
